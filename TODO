# TODO

[ ] Tuning, once built in box:
  [ ] Filter tilt
  [ ] Position tilt
  [ ] Touch scaling to amplitude

[ ] Filter and open/close
  [x] limit upper edge of filter (perhaps drop Q?) so no overflow
  [-] NOPE: reduce top gain on samples?
  [-] NOPE: when lid is 45° need to swap to Z not X (and now signal open)

[ ] Delay
  [x] does it need wed/dry code?
    [x] w/o it, is there too much delay
    [x] with it, does it no longer sound right?
    [x] with it, do you need the all pass code or is simple delay enough?
    - with wet/dry in, and set all wet, there seems to be no lag: still hear
    - the dry sound first.  at half wet/dry, there is deminishing I think
    - because of phase offset?
    - SCRAP the allpass - straight delay line works GREAT!
  [x] does it need the linear interp? NOPE
  [x] does it need DC leaking code? NOPE
  [ ] does half speed delay line work well?
  [ ] can changing the calculation format improve anything?


[x] how much code is FS init taking up?
  about 7k

HW:
[x] go back to 1M touch resistors
[-] revisit opAmp gain - maybe more?
[x] check wiring from LiPo port on CPE+
[~] work out wiring harnesses

[ ] on board speaker toggle
  [ ] start with off? or on? depends on how loud it is in the box....


## Later

[] on open lid, invert env.

[] Lightshow of some sort?


## Future

[ ] why is 12kHz sampling actually 13.7kHz?
[ ] DMA and FatFile issue?



# DMA issue notes

DMA to the DAC is stalled
  - for long enough to miss samples even at the slow 48kHz (or even lower)
when
  - the program does a read of a Read-Synchronized register
  - of a peripheral on the same Bridge (C)
  - and
    - the peripheral is clocked by something other than GCLK_GEN0
    - and no read request synchronization steps
so, such reads must be done either
  - to peripherals that are clocked by GLCK_GEN0
  - or, with read request synchronization

Demonstrated this with TC3 and it's COUNT16.COUNT register (which is read-sync)
But it appears to be the same issue with the FreeTouch code, which reads three
  such registers during measure():
    FREQCONTROL, CONVCONTROL, & RESULT

? Haven't test if Write Synchronized registers have the same issue
  - if so, then the FreeTouch code writes a lot of registers in measure_raw()
    - even if it doesn't really have to reconfigure the PTC on each measurement
  - and will need to check which are write sync., and are really needed

A single event seems induce about 185µs of stall
20 events in a row induce about 3.7ms of stall (which is 185µs x 20),
  but some DMA transfers do get by in that time



# New UI

slide switch in two positions: play <-> load

play mode
  A button: callibrate
  B button: test tone

load mode
  lights: sound sets:
    white - available
    black - missing
    red - available but too big
    green - loaded
    blue - will load

  A button: advance will load through options
  B button: load

layout on disk:
  \d[LR].*24k8\.raw
